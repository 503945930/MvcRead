



















// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `DefaultConnection`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Data Source=MY-PC\SQLWEIYANG;Initial Catalog=MvcRead;Persist Security Info=True;User ID=sa;password=**zapped**;`
//     Schema:                 ``
//     Include Views:          `True`



using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;

namespace DefaultConnection
{

	public partial class DefaultConnectionDB : Database
	{
		public DefaultConnectionDB() 
			: base("DefaultConnection")
		{
			CommonConstruct();
		}

		public DefaultConnectionDB(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			DefaultConnectionDB GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static DefaultConnectionDB GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new DefaultConnectionDB();
        }

		[ThreadStatic] static DefaultConnectionDB _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
        

		public class Record<T> where T:new()
		{
			public static DefaultConnectionDB repo { get { return DefaultConnectionDB.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }

			public void Save() { repo.Save(this); }
			public int Update() { return repo.Update(this); }

			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static bool Exists(string sql, params object[] args) { return repo.Exists<T>(sql, args); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }

		}

	}
	



    
	[TableName("sys_UserRoleMap")]


	[PrimaryKey("ID")]



	[ExplicitColumns]
    public partial class sys_UserRoleMap : DefaultConnectionDB.Record<sys_UserRoleMap>  
    {



		[Column] public int ID { get; set; }





		[Column] public int? UserId { get; set; }





		[Column] public int? RoleId { get; set; }



	}

    
	[TableName("sys_Permission")]


	[PrimaryKey("PermissionID")]



	[ExplicitColumns]
    public partial class sys_Permission : DefaultConnectionDB.Record<sys_Permission>  
    {



		[Column] public int PermissionID { get; set; }





		[Column] public string PermissionName { get; set; }





		[Column] public int? ParentID { get; set; }





		[Column] public string CreatePerson { get; set; }





		[Column] public DateTime? CreateDate { get; set; }





		[Column] public string UpdatePerson { get; set; }





		[Column] public DateTime? UpdateDate { get; set; }



	}

    
	[TableName("sys_RolePermissionMap")]


	[PrimaryKey("ID")]



	[ExplicitColumns]
    public partial class sys_RolePermissionMap : DefaultConnectionDB.Record<sys_RolePermissionMap>  
    {



		[Column] public int ID { get; set; }





		[Column] public int? RoleId { get; set; }





		[Column] public int? PermissionID { get; set; }



	}

    
	[TableName("sys_roleMenuMap")]


	[PrimaryKey("ID")]



	[ExplicitColumns]
    public partial class sys_roleMenuMap : DefaultConnectionDB.Record<sys_roleMenuMap>  
    {



		[Column] public int ID { get; set; }





		[Column] public int? RoleID { get; set; }





		[Column] public int? MenuID { get; set; }





		[Column] public bool? isEnble { get; set; }



	}

    
	[TableName("sys_button")]


	[PrimaryKey("ButtonID")]



	[ExplicitColumns]
    public partial class sys_button : DefaultConnectionDB.Record<sys_button>  
    {



		[Column] public int ButtonID { get; set; }





		[Column] public string ButtonName { get; set; }





		[Column] public int? ButtonSeq { get; set; }





		[Column] public string Description { get; set; }





		[Column] public string ButtonIcon { get; set; }





		[Column] public string CreatePerson { get; set; }





		[Column] public DateTime? CreateDate { get; set; }





		[Column] public string UpdatePerson { get; set; }





		[Column] public DateTime? UpdateDate { get; set; }



	}

    
	[TableName("sys_menu")]


	[PrimaryKey("MenuID")]



	[ExplicitColumns]
    public partial class sys_menu : DefaultConnectionDB.Record<sys_menu>  
    {



		[Column] public int MenuID { get; set; }





		[Column] public int? ParentID { get; set; }





		[Column] public string MenuName { get; set; }





		[Column] public string URL { get; set; }





		[Column] public string LiClass { get; set; }





		[Column] public string Class { get; set; }





		[Column] public string IconClass { get; set; }





		[Column] public string IconURL { get; set; }





		[Column] public string MenuSeq { get; set; }





		[Column] public string Description { get; set; }





		[Column] public bool? IsVisible { get; set; }





		[Column] public bool? IsEnable { get; set; }





		[Column] public string CreatePerson { get; set; }





		[Column] public DateTime? CreateDate { get; set; }





		[Column] public string UpdatePerson { get; set; }





		[Column] public DateTime? UpdateDate { get; set; }



	}

    
	[TableName("sys_role")]


	[PrimaryKey("RoleID")]



	[ExplicitColumns]
    public partial class sys_role : DefaultConnectionDB.Record<sys_role>  
    {



		[Column] public int RoleID { get; set; }





		[Column] public int? RoleSeq { get; set; }





		[Column] public string RoleName { get; set; }





		[Column] public string Description { get; set; }





		[Column] public string CreatePerson { get; set; }





		[Column] public DateTime? CreateDate { get; set; }





		[Column] public string UpdatePerson { get; set; }





		[Column] public DateTime? UpdateDate { get; set; }



	}

    
	[TableName("bu_userDataMap")]


	[PrimaryKey("ID")]



	[ExplicitColumns]
    public partial class bu_userDataMap : DefaultConnectionDB.Record<bu_userDataMap>  
    {



		[Column] public int ID { get; set; }





		[Column] public int? DataID { get; set; }





		[Column] public int? UserID { get; set; }





		[Column] public bool? IsEnable { get; set; }





		[Column] public DateTime? CreateDate { get; set; }



	}

    
	[TableName("sys_user")]


	[PrimaryKey("UserID")]



	[ExplicitColumns]
    public partial class sys_user : DefaultConnectionDB.Record<sys_user>  
    {



		[Column] public int UserID { get; set; }





		[Column] public string UserSeq { get; set; }





		[Column] public string UserName { get; set; }





		[Column] public string Description { get; set; }





		[Column] public string Password { get; set; }





		[Column] public int? RoleID { get; set; }





		[Column] public string RealName { get; set; }





		[Column] public string Depart { get; set; }





		[Column] public string Phone { get; set; }





		[Column] public string OrganizeName { get; set; }





		[Column] public string ConfigJSON { get; set; }





		[Column] public bool? IsEnable { get; set; }





		[Column] public int? LoginCount { get; set; }





		[Column] public DateTime? LastLoginDate { get; set; }





		[Column] public string CreatePerson { get; set; }





		[Column] public DateTime? CreateDate { get; set; }





		[Column] public string UpdatePerson { get; set; }





		[Column] public DateTime? UpdateDate { get; set; }



	}

    
	[TableName("bu_apply")]


	[PrimaryKey("ApplyID")]



	[ExplicitColumns]
    public partial class bu_apply : DefaultConnectionDB.Record<bu_apply>  
    {



		[Column] public int ApplyID { get; set; }





		[Column] public int? DataID { get; set; }





		[Column] public string ApplyName { get; set; }





		[Column] public string Depart { get; set; }





		[Column] public string GenerateCode { get; set; }





		[Column] public DateTime? StartTime { get; set; }





		[Column] public DateTime? EndTime { get; set; }





		[Column] public bool? IsEnable { get; set; }





		[Column] public DateTime? CreateDate { get; set; }



	}

    
	[TableName("sys_log")]


	[PrimaryKey("LogID")]



	[ExplicitColumns]
    public partial class sys_log : DefaultConnectionDB.Record<sys_log>  
    {



		[Column] public int LogID { get; set; }





		[Column] public string UserName { get; set; }





		[Column] public string IP { get; set; }





		[Column] public string Target { get; set; }





		[Column] public string Type { get; set; }





		[Column] public string Message { get; set; }





		[Column] public DateTime? Date { get; set; }



	}

    
	[TableName("sys_department")]


	[PrimaryKey("DepartmentID")]



	[ExplicitColumns]
    public partial class sys_department : DefaultConnectionDB.Record<sys_department>  
    {



		[Column] public int DepartmentID { get; set; }





		[Column] public string DepartmentName { get; set; }





		[Column] public string Description { get; set; }





		[Column] public int? ParentID { get; set; }





		[Column] public bool? IsEnable { get; set; }





		[Column] public string CreatePerson { get; set; }





		[Column] public DateTime? CreateDate { get; set; }





		[Column] public string UpdatePerson { get; set; }





		[Column] public DateTime? UpdateDate { get; set; }



	}

    
	[TableName("ww_CaseReason")]


	[PrimaryKey("CaseReasonId")]



	[ExplicitColumns]
    public partial class ww_CaseReason : DefaultConnectionDB.Record<ww_CaseReason>  
    {



		[Column] public int CaseReasonId { get; set; }





		[Column] public int? CaseReasonId_Paent { get; set; }





		[Column] public string CaseReasonName { get; set; }





		[Column] public bool? boolDel { get; set; }



	}

    
	[TableName("bu_data")]


	[PrimaryKey("DataID")]



	[ExplicitColumns]
    public partial class bu_datum : DefaultConnectionDB.Record<bu_datum>  
    {



		[Column] public int DataID { get; set; }





		[Column] public int? CaseReasonId { get; set; }





		[Column] public string CaseReason { get; set; }





		[Column] public string DataSeq { get; set; }





		[Column] public string DataName { get; set; }





		[Column] public string DataDescription { get; set; }





		[Column] public string DataURL { get; set; }





		[Column] public string DataSize { get; set; }





		[Column] public string suspect { get; set; }





		[Column] public string source { get; set; }





		[Column] public DateTime? CreateDate { get; set; }





		[Column] public int? totals { get; set; }





		[Column] public bool? IsEnable { get; set; }



	}


}



